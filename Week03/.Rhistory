beech_neigh <- st_join(beech_df, neighborhoods)
# Confirm that beech_neigh has the neighborhood information
head(beech_neigh)
```
Great! The beech tree object did not have neighborhood information until you performed the spatial join with `st_join()`. Now that the neighborhood information is included you would be able to tabulate the count of trees by neighborhood (you will do this later).
# Task 2: Spatial relationships
In this exercise you will determine which neighborhoods are at least partly within 2000 meters of the Empire State Building with `st_intersects()` and those that are completely within 2000 meters of the Empire State Building using `st_contains()`. You will then use the `st_intersection()` function (notice the slight difference in function name!) to **clip** the neighborhoods to the buffer.
A note about the output of functions that test relationships between two sets of features. The output of these and related functions is a special kind of list (with the class `sgbp`). For example, when using `st_intersects()`, the first element in the output can be accessed using `[[1]]`, which shows polygons from the second polygon that intersect with the first polygon. Likewise, `[[2]]` would show the polygons from from the first polygon that intersect with the second polygon.
## Instructions
* Create a point out of Empire State Building lat/long coordinates and assign to `empire_state`.
* Define the projection of `empire_state` to EPSG 4326 and then transform to `canopy`.
* Create a 2000 m buffer around `empire_state` using `dist` argument and assign the result to `buf`.
* Use `st_intersects()` to identify `neighborhoods` that intersect with the buffer object (`buf`) and call the result `neighborhoods_int`.
* Use `st_contains()` to identify `neighborhoods` that are completely within the buffer object (`buf`) and call the result `neighborhoods_cont`.
* Extract `neighborhoods` that are contained by and intersect with `buf` and save as `int` and `cont`.
* Use the `int` object you just created to identify the names of the neighborhoods that intersect with buffer (the first will be Clinton).
* Use `st_intersection()` to "clip" the neighborhoods by `buf` and call this `neighborhoods_clip`.
```{r intersect, eval=FALSE}
# Create the point for the empire state building at 40.748433 degrees of northern latitude and 73.985656 west longitude. Longitude goes first! Remember the difference between east and west!
empire_state <- st_sfc(st_point(c(40.748433, -73.985656)))
# Define its projection as 4326 and then project to canopy
st_crs(empire_state)<- 4326   # can use crs_1
# Transform to the projection of canopy
empire_state <-  st_transform(empire_state, crs = crs(canopy))
# Create a buffer
buf <- st_buffer(empire_state, dist = 2000)
# Identify neighborhoods that intersect with the buffer
neighborhoods_int <- st_intersects(buf, neighborhoods_crs)
# Identify neighborhoods contained by the buffer
neighborhoods_cont <- st_intersection(buf, neighborhoods_crs)
# neighborhoods_cont
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
---
title: "10 - Multi-layer geoprocessing and relationships"
author: "Adela Sobotkova"
date: "04/01/2021 updated `r format(Sys.time(), '%B %d, %Y')`"
output:
rmdformats::readthedown:
highlight: kate
---
```{r setup, include=FALSE}
library(pacman)
p_load(knitr, rmdformats, sf, raster)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
```
```{r libraries, include=FALSE}
# Read in the trees shapefile
trees <- st_read("../Week02/data/trees.shp")
# Read in the beech shapefile
beech <- st_read("../Week02/data/beech.shp")
# Read in the neighborhood shapefile
neighborhoods <- st_read("../Week02/data/neighborhoods.shp")
# Read in the tree canopy single-band raster
canopy <- raster("../Week02/data/canopy.tif")
# Read in the manhattan Landsat image multi-band raster
manhattan <- brick("../Week02/data/manhattan.tif")
# Project neighborhood shapefile to canopy
neighborhoods_crs <- st_transform(neighborhoods, crs = crs(canopy))
```
# Task 1: Spatial joins
For many analysis types you need to link geographies spatially. For example, you want to know how many trees are in each neighborhood but you don't have a neighborhood attribute in the tree data. The best way to do this is with a spatial join using `st_join()`.
Importantly, the `st_join()` function requires `sf` data frames as input and will not accept an object that is just `sf` geometry. You can use the `st_sf()` function to convert `sf` geometry objects to an sf data frame (`st_sf()` is essentially the opposite of `st_geometry()`).
## Instructions
* Plot the beech trees (`beech`) on top of the neighborhoods (`neighborhoods`). You will want to plot only the geometry of the neighborhoods.
* Use `class()` to see if the beech object has class `data.frame` or if it's just geometry.
* Convert the `sf` geometry object `beech` to an sf data frame with `st_sf()`.
* Use `class()` to confirm that `beech` now has a class of data.frame (as well as sf).
* Use `st_join()` to conduct a spatial join in order to add neighborhood information to the beech object.
* Use `head()` to confirm that the new object has neighborhood information -- for example, it should now have neighborhood name (`ntaname`).
```{r beech-neighbor, eval=FALSE}
# Plot the beech on top of the neighborhoods
plot(st_geometry(neighborhoods))
plot(beech, add = TRUE, pch = 16, col = "red")
# Determine whether beech has class data.frame
str(beech) # it does!
# Convert the beech geometry to a sf data frame
beech_df <- st_as_sf(beech)
# Confirm that beech now has the data.frame class
str(beech_df)
# Join the beech trees with the neighborhoods
beech_neigh <- st_join(beech_df, neighborhoods)
# Confirm that beech_neigh has the neighborhood information
head(beech_neigh)
```
Great! The beech tree object did not have neighborhood information until you performed the spatial join with `st_join()`. Now that the neighborhood information is included you would be able to tabulate the count of trees by neighborhood (you will do this later).
# Task 2: Spatial relationships
In this exercise you will determine which neighborhoods are at least partly within 2000 meters of the Empire State Building with `st_intersects()` and those that are completely within 2000 meters of the Empire State Building using `st_contains()`. You will then use the `st_intersection()` function (notice the slight difference in function name!) to **clip** the neighborhoods to the buffer.
A note about the output of functions that test relationships between two sets of features. The output of these and related functions is a special kind of list (with the class `sgbp`). For example, when using `st_intersects()`, the first element in the output can be accessed using `[[1]]`, which shows polygons from the second polygon that intersect with the first polygon. Likewise, `[[2]]` would show the polygons from from the first polygon that intersect with the second polygon.
## Instructions
* Create a point out of Empire State Building lat/long coordinates and assign to `empire_state`.
* Define the projection of `empire_state` to EPSG 4326 and then transform to `canopy`.
* Create a 2000 m buffer around `empire_state` using `dist` argument and assign the result to `buf`.
* Use `st_intersects()` to identify `neighborhoods` that intersect with the buffer object (`buf`) and call the result `neighborhoods_int`.
* Use `st_contains()` to identify `neighborhoods` that are completely within the buffer object (`buf`) and call the result `neighborhoods_cont`.
* Extract `neighborhoods` that are contained by and intersect with `buf` and save as `int` and `cont`.
* Use the `int` object you just created to identify the names of the neighborhoods that intersect with buffer (the first will be Clinton).
* Use `st_intersection()` to "clip" the neighborhoods by `buf` and call this `neighborhoods_clip`.
```{r intersect, eval=FALSE}
# Create the point for the empire state building at 40.748433 degrees of northern latitude and 73.985656 west longitude. Longitude goes first! Remember the difference between east and west!
empire_state <- st_sfc(st_point(c(40.748433, -73.985656)))
# Define its projection as 4326 and then project to canopy
st_crs(empire_state)<- 4326   # can use crs_1
# Transform to the projection of canopy
empire_state <-  st_transform(empire_state, crs = crs(canopy))
# Create a buffer
buf <- st_buffer(empire_state, dist = 2000)
# Identify neighborhoods that intersect with the buffer
neighborhoods_int <- st_intersects(buf, neighborhoods_crs)
library(pacman)
p_load(knitr, rmdformats, sf, raster)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
```
```{r libraries, include=FALSE}
# Read in the trees shapefile
trees <- st_read("../Week02/data/trees.shp")
# Read in the beech shapefile
beech <- st_read("../Week02/data/beech.shp")
# Read in the neighborhood shapefile
neighborhoods <- st_read("../Week02/data/neighborhoods.shp")
# Read in the tree canopy single-band raster
canopy <- raster("../Week02/data/canopy.tif")
# Read in the manhattan Landsat image multi-band raster
manhattan <- brick("../Week02/data/manhattan.tif")
# Project neighborhood shapefile to canopy
neighborhoods_crs <- st_transform(neighborhoods, crs = crs(canopy))
```
# Read in the neighborhood shapefile
neighborhoods <- st_read("../Week02/data/neighborhoods.shp")
# Read in the beech shapefile
beech <- st_read("../Week02/data/beech.shp")
getwd()
setwd("C:/Users/Lenovo/Desktop/Diverse dokumenter/Cognitive Science/cultural_data_science/cds-spatial/Week03")
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
```
```{r libraries, include=FALSE}
# Read in the trees shapefile
trees <- st_read("../Week02/data/trees.shp")
# Read in the beech shapefile
beech <- st_read("../Week02/data/beech.shp")
# Read in the neighborhood shapefile
neighborhoods <- st_read("../Week02/data/neighborhoods.shp")
# Read in the tree canopy single-band raster
canopy <- raster("../Week02/data/canopy.tif")
# Read in the manhattan Landsat image multi-band raster
manhattan <- brick("../Week02/data/manhattan.tif")
# Project neighborhood shapefile to canopy
neighborhoods_crs <- st_transform(neighborhoods, crs = crs(canopy))
```
# Task 1: Spatial joins
For many analysis types you need to link geographies spatially. For example, you want to know how many trees are in each neighborhood but you don't have a neighborhood attribute in the tree data. The best way to do this is with a spatial join using `st_join()`.
Importantly, the `st_join()` function requires `sf` data frames as input and will not accept an object that is just `sf` geometry. You can use the `st_sf()` function to convert `sf` geometry objects to an sf data frame (`st_sf()` is essentially the opposite of `st_geometry()`).
## Instructions
* Plot the beech trees (`beech`) on top of the neighborhoods (`neighborhoods`). You will want to plot only the geometry of the neighborhoods.
* Use `class()` to see if the beech object has class `data.frame` or if it's just geometry.
* Convert the `sf` geometry object `beech` to an sf data frame with `st_sf()`.
* Use `class()` to confirm that `beech` now has a class of data.frame (as well as sf).
* Use `st_join()` to conduct a spatial join in order to add neighborhood information to the beech object.
* Use `head()` to confirm that the new object has neighborhood information -- for example, it should now have neighborhood name (`ntaname`).
```{r beech-neighbor, eval=FALSE}
# Plot the beech on top of the neighborhoods
plot(st_geometry(neighborhoods))
plot(beech, add = TRUE, pch = 16, col = "red")
# Determine whether beech has class data.frame
str(beech) # it does!
# Convert the beech geometry to a sf data frame
beech_df <- st_as_sf(beech)
# Confirm that beech now has the data.frame class
str(beech_df)
# Join the beech trees with the neighborhoods
beech_neigh <- st_join(beech_df, neighborhoods)
# Confirm that beech_neigh has the neighborhood information
head(beech_neigh)
```
Great! The beech tree object did not have neighborhood information until you performed the spatial join with `st_join()`. Now that the neighborhood information is included you would be able to tabulate the count of trees by neighborhood (you will do this later).
# Task 2: Spatial relationships
In this exercise you will determine which neighborhoods are at least partly within 2000 meters of the Empire State Building with `st_intersects()` and those that are completely within 2000 meters of the Empire State Building using `st_contains()`. You will then use the `st_intersection()` function (notice the slight difference in function name!) to **clip** the neighborhoods to the buffer.
A note about the output of functions that test relationships between two sets of features. The output of these and related functions is a special kind of list (with the class `sgbp`). For example, when using `st_intersects()`, the first element in the output can be accessed using `[[1]]`, which shows polygons from the second polygon that intersect with the first polygon. Likewise, `[[2]]` would show the polygons from from the first polygon that intersect with the second polygon.
## Instructions
* Create a point out of Empire State Building lat/long coordinates and assign to `empire_state`.
* Define the projection of `empire_state` to EPSG 4326 and then transform to `canopy`.
* Create a 2000 m buffer around `empire_state` using `dist` argument and assign the result to `buf`.
* Use `st_intersects()` to identify `neighborhoods` that intersect with the buffer object (`buf`) and call the result `neighborhoods_int`.
* Use `st_contains()` to identify `neighborhoods` that are completely within the buffer object (`buf`) and call the result `neighborhoods_cont`.
* Extract `neighborhoods` that are contained by and intersect with `buf` and save as `int` and `cont`.
* Use the `int` object you just created to identify the names of the neighborhoods that intersect with buffer (the first will be Clinton).
* Use `st_intersection()` to "clip" the neighborhoods by `buf` and call this `neighborhoods_clip`.
```{r intersect, eval=FALSE}
# Create the point for the empire state building at 40.748433 degrees of northern latitude and 73.985656 west longitude. Longitude goes first! Remember the difference between east and west!
empire_state <- st_sfc(st_point(c(40.748433, -73.985656)))
# Define its projection as 4326 and then project to canopy
st_crs(empire_state)<- 4326   # can use crs_1
# Transform to the projection of canopy
empire_state <-  st_transform(empire_state, crs = crs(canopy))
# Create a buffer
buf <- st_buffer(empire_state, dist = 2000)
# Identify neighborhoods that intersect with the buffer
neighborhoods_int <- st_intersects(buf, neighborhoods_crs)
# Identify neighborhoods contained by the buffer
neighborhoods_cont <- st_intersection(buf, neighborhoods_crs)
# neighborhoods_cont
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
cont <- neighborhoods_cont[[1]]
int
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
cont <- neighborhoods_cont[[1]]
int
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
int
cont
cont <- neighborhoods_cont[[1]]
cont
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[neighborhoods]]
int
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[2]]
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
int
# Identify neighborhoods contained by the buffer
neighborhoods_cont <- st_contains(buf, neighborhoods_crs)
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
int
cont <- neighborhoods_cont[[1]]
cont
# Identify neighborhoods contained by the buffer
neighborhoods_cont <- st_contains(buf, neighborhoods_crs)
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
int
cont <- neighborhoods_cont[[1]]
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[1]
int
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
int
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
int
cont <- neighborhoods_cont[[1]]
cont
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
int
cont <- neighborhoods_cont[[1]]
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
int
cont <- neighborhoods_cont[[1]]
cont
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[2]]
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
int
cont <- neighborhoods_cont[[1]]
cont
# Create the point for the empire state building at 40.748433 degrees of northern latitude and 73.985656 west longitude. Longitude goes first! Remember the difference between east and west!
empire_state <- st_sfc(st_point(c(40.748433, -73.985656)))
# Define its projection as 4326 and then project to canopy
st_crs(empire_state)<- 4326   # can use crs_1
# Transform to the projection of canopy
empire_state <-  st_transform(empire_state, crs = crs(canopy))
# Create a buffer
buf <- st_buffer(empire_state, dist = 2000)
# Identify neighborhoods that intersect with the buffer
neighborhoods_int <- st_intersects(buf, neighborhoods_crs)
# Identify neighborhoods contained by the buffer
neighborhoods_cont <- st_contains(buf, neighborhoods_crs)
# neighborhoods_cont
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
int
cont <- neighborhoods_cont[[1]]
cont
# Get the names of the names of neighborhoods in buffer
neighborhoods_crs$ntaname[___]
# Clip the neighborhood layer by the buffer (ignore the warning)
neighborhoods_clip <- ___(buf, neighborhoods_crs)
# Plot the geometry of the clipped neighborhoods
plot(st_geometry(neighborhoods_clip), col = "red")
plot(neighborhoods_crs[cont,], add = TRUE, col = "yellow")
int
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
int
cont <- neighborhoods_cont[[1]]
cont
neighborhoods_cont
# Create the point for the empire state building at 40.748433 degrees of northern latitude and 73.985656 west longitude. Longitude goes first! Remember the difference between east and west!
empire_state <- st_sfc(st_point(c(40.748433, -73.985656)))
# Define its projection as 4326 and then project to canopy
st_crs(empire_state)<- 4326   # can use crs_1
# Transform to the projection of canopy
empire_state <-  st_transform(empire_state, crs = crs(canopy))
# Create a buffer
buf <- st_buffer(empire_state, dist = 2000)
# Identify neighborhoods that intersect with the buffer
neighborhoods_int <- st_intersects(buf, neighborhoods_crs)
# Identify neighborhoods contained by the buffer
neighborhoods_cont <- st_contains(buf, neighborhoods_crs)
neighborhoods_cont
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
# Identify neighborhoods contained by the buffer
neighborhoods_cont <- st_contains(buf, neighborhoods_crs)
neighborhoods_cont
# Identify neighborhoods contained by the buffer
neighborhoods_cont <- st_contains(buf, neighborhoods_crs)
# Create the point for the empire state building at 40.748433 degrees of northern latitude and 73.985656 west longitude. Longitude goes first! Remember the difference between east and west!
empire_state <- st_sfc(st_point(c(40.748433, -73.985656)))
# Define its projection as 4326 and then project to canopy
st_crs(empire_state)<- 4326   # can use crs_1
# Transform to the projection of canopy
empire_state <-  st_transform(empire_state, crs = crs(canopy))
# Create a buffer
buf <- st_buffer(empire_state, dist = 2000)
# Identify neighborhoods that intersect with the buffer
neighborhoods_int <- st_intersects(buf, neighborhoods_crs)
# Identify neighborhoods contained by the buffer
neighborhoods_cont <- st_contains(buf, neighborhoods_crs)
neighborhoods_cont
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
int
cont <- neighborhoods_cont[[1]]
# Create the point for the empire state building at 40.748433 degrees of northern latitude and 73.985656 west longitude. Longitude goes first! Remember the difference between east and west!
empire_state <- st_sfc(st_point(c(40.748433, 73.985656)))
# Define its projection as 4326 and then project to canopy
st_crs(empire_state)<- 4326   # can use crs_1
# Transform to the projection of canopy
empire_state <-  st_transform(empire_state, crs = crs(canopy))
# Create a buffer
buf <- st_buffer(empire_state, dist = 2000)
# Identify neighborhoods that intersect with the buffer
neighborhoods_int <- st_intersects(buf, neighborhoods_crs)
# Identify neighborhoods contained by the buffer
neighborhoods_cont <- st_contains(buf, neighborhoods_crs)
neighborhoods_cont
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
int
# Create the point for the empire state building at 40.748433 degrees of northern latitude and 73.985656 west longitude. Longitude goes first! Remember the difference between east and west!
empire_state <- st_sfc(st_point(c(40.748433, -73.985656)))
# Define its projection as 4326 and then project to canopy
st_crs(empire_state)<- 4326   # can use crs_1
# Transform to the projection of canopy
empire_state <-  st_transform(empire_state, crs = crs(canopy))
# Create the point for the empire state building at 40.748433 degrees of northern latitude and 73.985656 west longitude. Longitude goes first! Remember the difference between east and west!
empire_state <- st_sfc(st_point(c(40.748433, -73.985656)))
# Define its projection as 4326 and then project to canopy
st_crs(empire_state) <- 4326   # can use crs_1
# Transform to the projection of canopy
empire_state <-  st_transform(empire_state, crs = crs(canopy))
# Create a buffer
buf <- st_buffer(empire_state, dist = 2000)
# Identify neighborhoods that intersect with the buffer
neighborhoods_int <- st_intersects(buf, neighborhoods_crs)
# Identify neighborhoods contained by the buffer
neighborhoods_cont <- st_contains(buf, neighborhoods_crs)
neighborhoods_cont
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
int
# Read in the trees shapefile
trees <- st_read("../Week02/data/trees.shp")
# Read in the beech shapefile
beech <- st_read("../Week02/data/beech.shp")
# Read in the neighborhood shapefile
neighborhoods <- st_read("../Week02/data/neighborhoods.shp")
# Read in the tree canopy single-band raster
canopy <- raster("../Week02/data/canopy.tif")
# Read in the manhattan Landsat image multi-band raster
manhattan <- brick("../Week02/data/manhattan.tif")
# Project neighborhood shapefile to canopy
neighborhoods_crs <- st_transform(neighborhoods, crs = crs(canopy))
# Read in the manhattan Landsat image multi-band raster
manhattan <- brick("../Week02/data/manhattan.tif")
# Read in the tree canopy single-band raster
canopy <- raster("../Week02/data/canopy.tif")
# Read in the tree canopy single-band raster
canopy <- raster("../Week02/data/canopy.tif")
# Read in the tree canopy single-band raster
canopy <- raster("../Week02/data/canopy.tif")
# Read in the tree canopy single-band raster
canopy <- raster("../Week02/data/canopy.tif")
# Read in the tree canopy single-band raster
canopy <- raster("../Week02/data/canopy.tif")
# Read in the neighborhood shapefile
neighborhoods <- st_read("../Week02/data/neighborhoods.shp")
# Read in the manhattan Landsat image multi-band raster
manhattan <- brick("../Week02/data/manhattan.tif")
# Read in the tree canopy single-band raster
canopy <- raster("../Week02/data/canopy.tif")
# Create the point for the empire state building at 40.748433 degrees of northern latitude and 73.985656 west longitude. Longitude goes first! Remember the difference between east and west!
empire_state <- st_sfc(st_point(c(-73.985656, 40.748433)))
# Define its projection as 4326 and then project to canopy
st_crs(empire_state) <- 4326   # can use crs_1
# Transform to the projection of canopy
empire_state <-  st_transform(empire_state, crs = crs(canopy))
# Create a buffer
buf <- st_buffer(empire_state, dist = 2000)
# Identify neighborhoods that intersect with the buffer
neighborhoods_int <- st_intersects(buf, neighborhoods_crs)
# Identify neighborhoods contained by the buffer
neighborhoods_cont <- st_contains(buf, neighborhoods_crs)
neighborhoods_cont
# Get the indexes of which neighborhoods intersect
# and are contained by the buffer
int <- neighborhoods_int[[1]]
int
cont <- neighborhoods_cont[[1]]
cont
# Get the names of the names of neighborhoods in buffer
neighborhoods_crs$ntaname[1]
# Get the names of the names of neighborhoods in buffer
neighborhoods_crs$ntaname[1:]
# Get the names of the names of neighborhoods in buffer
neighborhoods_crs$ntaname[1:]
# Get the names of the names of neighborhoods in buffer
neighborhoods_crs$ntaname[]
# Clip the neighborhood layer by the buffer (ignore the warning)
neighborhoods_clip <- st_intersection(buf, neighborhoods_crs)
# Plot the geometry of the clipped neighborhoods
plot(st_geometry(neighborhoods_clip), col = "red")
plot(neighborhoods_crs[cont,], add = TRUE, col = "yellow")
int
str(neighborhoods_int)
# Get the names of the names of neighborhoods in buffer
neighborhoods_crs$ntaname[]
# Get the names of the names of neighborhoods in buffer
neighborhoods_crs$ntaname[cont]
# Read in the parks object
parks <- read_sf("C:/Users/Lenovo/Desktop/Diverse dokumenter/Cognitive Science/cultural_data_science/cds-spatial/Week02/data/parks.shp")
# Test whether the CRS match
#head(empire_state)
crs(empire_state)
crs(parks)
# Test whether the CRS match
#head(empire_state)
crs(empire_state)
# Test whether the CRS match
#head(empire_state)
crs(empire_state)
crs(parks)
# Project parks to match empire state
parks_es <- st_transform(parks, crs = crs(empire_state))
# Compute the distance between empire_state and parks_es
d <- st_distance(empire_state, parks_es)
# Take a quick look at the result
head(d)
# Find the index of the nearest park
nearest <- which.min(d)
# Identify the park that is nearest
parks_es[nearest, ]$signname
