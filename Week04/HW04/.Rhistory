# Create histograms of the total counts
hist(tree_counts_renamed$tree_cnt)
ggplot(tree_counts_renamed, aes(x = boroname, y = tree_cnt)) + geom_col() + theme_minimal()
p_load(sf, raster, ggplot2, dplyr)
ggplot(tree_counts_renamed, aes(x = boroname, y = tree_cnt)) + geom_col() + theme_minimal()
ggplot(tree_counts_renamed, aes(x = boroname, y = tree_cnt)) +
geom_col()
# Create histograms of the total counts
ggplot(tree_counts_renamed, aes(x = boroname, y = tree_cnt)) +
geom_col()
# Compute areas and unclass
areas <- area(unclass(neighborhoods))
# Compute areas and unclass
areas <- areas(unclass(neighborhoods))
# Compute areas and unclass
areas <- st_area(unclass(neighborhoods))
unclass(neighborhoods)
# Compute areas and unclass
areas <- unclass(st_area(neighborhoods))
# Add the areas to the neighborhoods object
neighborhoods_area <- add_column(neighborhoods, area = areas)
# Add the areas to the neighborhoods object
neighborhoods_area <- mutate(neighborhoods, area = areas)
neighborhoods_area
tree_counts_renamed, by = c("ntaname" = "nta")
# Join neighborhoods and counts by shared columns (find the matching one in neighborhoods)
neighborhoods_counts <- left_join(neighborhoods_area, tree_counts_renamed, by = c("ntaname" = "nta")
# Join neighborhoods and counts by shared columns (find the matching one in neighborhoods)
neighborhoods_counts <- left_join(neighborhoods_area, tree_counts_renamed, by = c("ntaname" = "nta"))
# Join neighborhoods and counts by shared columns (find the matching one in neighborhoods)
neighborhoods_counts <- left_join(neighborhoods_area, tree_counts_renamed, by = c("ntaname" = "nta"))
tree_counts_renamed
neighborhoods_area
# Join neighborhoods and counts by shared columns (find the matching one in neighborhoods)
neighborhoods_counts <- left_join(neighborhoods_area, tree_counts_renamed, by = c("boro_name" = "boroname"))
# Replace NA values with 0 (lookup ifelse() function if needed)
neighborhoods_counts <- mutate(neighborhoods_counts,
tree_cnt = ifelse(is.na(tree_cnt),
0, tree_cnt))
neighborhoods_counts
# Compute the density
neighborhoods_counts <- mutate(neighborhoods_counts,
tree_density = tree_cnt/area)
neighborhoods_counts
# Confirm that you have the neighborhood density results
head(neighborhoods_counts)
# Transform the neighborhoods CRS to match the canopy layer
neighborhoods_crs <- st_transform(neighborhoods_counts, crs = crs(canopy, as.Text = TRUE))
crs(neighborhoods_counts)
crs(canopy)
# Transform the neighborhoods CRS to match the canopy layer
neighborhoods_crs <- st_transform(neighborhoods_counts, crs = crs(canopy, asText = TRUE))
crs(neighborhoods_counts)
crs(canopy)
crs(neighborhoods_crs)
crs(canopy)
# Convert neighborhoods object to a Spatial object (optional)
neighborhoods_sp <- st_as_sf(neighborhoods_crs, "Spatial")
canopy
head(canopy)
# Compute the mean of canopy values by neighborhood
canopy_neighborhoods <- raster::extract(canopy, neighborhoods_sp, fun = mean)
# Add the mean canopy values to neighborhoods
neighborhoods_avg_canopy <- mutate(neighborhoods, avg_canopy = canopy_neighborhoods)
neighborhoods_avg_canopy
neighborhoods_avg_canopy
# Create a histogram of tree density (tree_density)
ggplot(neighborhoods_avg_canopy, aes(x = avg_canopy)) +
___(color = "white")
# Create a histogram of tree density (tree_density)
ggplot(neighborhoods_avg_canopy, aes(x = avg_canopy)) +
geom_hist(color = "white")
# Create a histogram of tree density (tree_density)
ggplot(neighborhoods_avg_canopy, aes(x = avg_canopy)) +
geom_histogram(color = "white")
# Create a histogram of tree density (tree_density)
ggplot(neighborhoods_avg_canopy, aes(x = tree_density)) +
geom_histogram(color = "white")
# Create a histogram of average canopy (avg_canopy)
ggplot(neighborhoods_avg_canopy, aes(x = avg_canopy)) +
geom_histogram(color = "white")
---
title: "12 - Compute Tree Canopy"
author: "Adela Sobotkova"
date: "07/01/2021 updated `r format(Sys.time(), '%B %d, %Y')`"
output:
rmdformats::readthedown:
highlight: kate
---
```{r setup, include=FALSE}
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
```
# Task 1: Compute tree density by neighborhood (I)
In order to compute tree density by neighborhood you need two things. You will need to know the area of the neighborhoods, which you will compute in the next exercise. And you need the **tree counts by neighborhood** which is the focus of this exercise.
You will produce counts of all trees by neighborhood in NYC and create a single data frame with a column for total trees. The result should be a data frame with **no geometry**.
## Instructions
* Load `sf`, `raster`, and `dplyr` in your workspace.
* Load `trees`, `neighborhoods`, `canopy`, and `manhattan` objects from Week 02 data folder
* Use the `count()` function from `dplyr` on the `trees` object to compute total trees by neighborhood. The neighborhood variable is `hood`. Call the new object `tree_counts`.
* Use `head()` to take a quick look at `tree_counts` and see if the geometry variable still exists.
* Remove the geometry from your `tree_counts` data frame.
* The default for the `count()` function is to name the count field n. Use the `rename()` function from dplyr to change the column called `n` to `tree_cnt`.
* Use `hist()` to create a quick histogram of the tree counts.
```{r count-trees, eval=FALSE}
# Load data and libraries
library(pacman)
p_load(sf, raster, ggplot2, dplyr)
# Read in the trees shapefile
trees <- read_sf("../data/trees.shp")
# Read in the neighborhood shapefile
neighborhoods <- read_sf("../data/neighborhoods.shp")
# Read in the tree canopy single-band raster
canopy <- raster("../data/canopy.tif")
# Read in the manhattan Landsat image multi-band raster
manhattan <- brick("../data/canopy.tif")
# Compute the counts of all trees by hood
tree_counts <- count(trees, boroname)
# Take a quick look
head(tree_counts)
# Remove the geometry
tree_counts_no_geom <- st_set_geometry(tree_counts, NULL)
# Rename the n variable to tree_cnt
tree_counts_renamed <- rename(tree_counts_no_geom, tree_cnt = n)
# Create histograms of the total counts
ggplot(tree_counts_renamed, aes(x = boroname, y = tree_cnt)) +
geom_col()
```
Great, you've completed the first step toward computing tree densities. You now have tree counts by neighborhoods and in the next exercise you'll compute the neighborhood areas.
# Task 2: Compute tree density by neighborhood (II)
We have the tree counts (from the previous exercise). In this exercise you will compute neighborhood areas, add them to the neighborhood `sf` object and then you'll join in the non-spatial tree counts data frame from the previous exercise.
## Instructions
* Compute the areas of the neighborhoods with `st_area()` and wrap them in the `unclass()` function to remove the units. Save this object as `areas`.
* Use `mutate()` to add the areas to your neighborhoods object. Call the new variable `area`.
* `left_join()` the `neighborhoods` object (which should now have areas) and the `tree_counts` object that you calculated in the last exercise.
* Use `mutate()` with the given `ifelse()` code to replace `NA`s with 0.
* Create a new column in `neighborhoods` called `tree_density` which is `tree_cnt/area`.
```{r tree-density, eval=FALSE}
# Compute areas and unclass
areas <- unclass(st_area(neighborhoods))
# Add the areas to the neighborhoods object
neighborhoods_area <- mutate(neighborhoods, area = areas)
neighborhoods_area
tree_counts_renamed
# Join neighborhoods and counts by shared columns (find the matching one in neighborhoods)
neighborhoods_counts <- left_join(neighborhoods_area, tree_counts_renamed, by = c("boro_name" = "boroname"))
# Replace NA values with 0 (lookup ifelse() function if needed)
neighborhoods_counts <- mutate(neighborhoods_counts,
tree_cnt = ifelse(is.na(tree_cnt),
0, tree_cnt))
neighborhoods_counts
# Compute the density
neighborhoods_counts <- mutate(neighborhoods_counts,
tree_density = tree_cnt/area)
```
You're part way there. You have now computed the tree density variable using, in part, the `sf` function `st_area()`. In the next exercises you will compute the average tree canopy values and then compare.
# Task 3: Compute average tree canopy by neighborhood
In the previous exercises you computed tree density by neighborhood using tree counts. In this exercise you will compute average tree canopy by neighborhood as a percentage so that we can compare if the results are similar.
## Instructions
* Use `head()` to confirm that your `neighborhoods` object has the density results from the previous exercises.
* Transform the CRS of the `neighborhoods` object to match the `canopy` object (load the latter if needed).
* Convert the `neighborhoods` object to an `sp` object for use with the `raster` package.
* Compute the mean of `canopy` values by neighborhood using `raster::extract()` with the argument fun = mean (this might take a minute).
* Use `mutate`() to add a new column `avg_canopy` to neighborhoods, which is equal to `canopy_neighborhoods`.
```{r tree-canopy, eval=FALSE}
# Confirm that you have the neighborhood density results
head(neighborhoods_counts)
# Transform the neighborhoods CRS to match the canopy layer
neighborhoods_crs <- st_transform(neighborhoods_counts, crs = crs(canopy, asText = TRUE))
# Checking that it works
crs(neighborhoods_crs)
crs(canopy)
# Convert neighborhoods object to a Spatial object (optional)
neighborhoods_sp <- st_as_sf(neighborhoods_crs, "Spatial")
head(canopy)
# Compute the mean of canopy values by neighborhood
canopy_neighborhoods <- raster::extract(canopy, neighborhoods_sp, fun = mean)
canopy_neighborhoods
---
title: "12 - Compute Tree Canopy"
author: "Adela Sobotkova"
date: "07/01/2021 updated `r format(Sys.time(), '%B %d, %Y')`"
output:
rmdformats::readthedown:
highlight: kate
---
```{r setup, include=FALSE}
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
```
# Task 1: Compute tree density by neighborhood (I)
In order to compute tree density by neighborhood you need two things. You will need to know the area of the neighborhoods, which you will compute in the next exercise. And you need the **tree counts by neighborhood** which is the focus of this exercise.
You will produce counts of all trees by neighborhood in NYC and create a single data frame with a column for total trees. The result should be a data frame with **no geometry**.
## Instructions
* Load `sf`, `raster`, and `dplyr` in your workspace.
* Load `trees`, `neighborhoods`, `canopy`, and `manhattan` objects from Week 02 data folder
* Use the `count()` function from `dplyr` on the `trees` object to compute total trees by neighborhood. The neighborhood variable is `hood`. Call the new object `tree_counts`.
* Use `head()` to take a quick look at `tree_counts` and see if the geometry variable still exists.
* Remove the geometry from your `tree_counts` data frame.
* The default for the `count()` function is to name the count field n. Use the `rename()` function from dplyr to change the column called `n` to `tree_cnt`.
* Use `hist()` to create a quick histogram of the tree counts.
```{r count-trees, eval=FALSE}
# Load data and libraries
library(pacman)
p_load(sf, raster, ggplot2, dplyr)
# Read in the trees shapefile
trees <- read_sf("../data/trees.shp")
# Read in the neighborhood shapefile
neighborhoods <- read_sf("../data/neighborhoods.shp")
# Read in the tree canopy single-band raster
canopy <- raster("../data/canopy.tif")
# Read in the manhattan Landsat image multi-band raster
manhattan <- brick("../data/canopy.tif")
# Compute the counts of all trees by hood
tree_counts <- count(trees, boroname)
# Take a quick look
head(tree_counts)
# Remove the geometry
tree_counts_no_geom <- st_set_geometry(tree_counts, NULL)
# Rename the n variable to tree_cnt
tree_counts_renamed <- rename(tree_counts_no_geom, tree_cnt = n)
# Create histograms of the total counts
ggplot(tree_counts_renamed, aes(x = boroname, y = tree_cnt)) +
geom_col()
```
Great, you've completed the first step toward computing tree densities. You now have tree counts by neighborhoods and in the next exercise you'll compute the neighborhood areas.
# Task 2: Compute tree density by neighborhood (II)
We have the tree counts (from the previous exercise). In this exercise you will compute neighborhood areas, add them to the neighborhood `sf` object and then you'll join in the non-spatial tree counts data frame from the previous exercise.
## Instructions
* Compute the areas of the neighborhoods with `st_area()` and wrap them in the `unclass()` function to remove the units. Save this object as `areas`.
* Use `mutate()` to add the areas to your neighborhoods object. Call the new variable `area`.
* `left_join()` the `neighborhoods` object (which should now have areas) and the `tree_counts` object that you calculated in the last exercise.
* Use `mutate()` with the given `ifelse()` code to replace `NA`s with 0.
* Create a new column in `neighborhoods` called `tree_density` which is `tree_cnt/area`.
```{r tree-density, eval=FALSE}
# Compute areas and unclass
areas <- unclass(st_area(neighborhoods))
# Add the areas to the neighborhoods object
neighborhoods_area <- mutate(neighborhoods, area = areas)
neighborhoods_area
tree_counts_renamed
# Join neighborhoods and counts by shared columns (find the matching one in neighborhoods)
neighborhoods_counts <- left_join(neighborhoods_area, tree_counts_renamed, by = c("boro_name" = "boroname"))
# Replace NA values with 0 (lookup ifelse() function if needed)
neighborhoods_counts <- mutate(neighborhoods_counts,
tree_cnt = ifelse(is.na(tree_cnt),
0, tree_cnt))
neighborhoods_counts
# Compute the density
neighborhoods_counts <- mutate(neighborhoods_counts,
tree_density = tree_cnt/area)
```
You're part way there. You have now computed the tree density variable using, in part, the `sf` function `st_area()`. In the next exercises you will compute the average tree canopy values and then compare.
# Task 3: Compute average tree canopy by neighborhood
In the previous exercises you computed tree density by neighborhood using tree counts. In this exercise you will compute average tree canopy by neighborhood as a percentage so that we can compare if the results are similar.
## Instructions
* Use `head()` to confirm that your `neighborhoods` object has the density results from the previous exercises.
* Transform the CRS of the `neighborhoods` object to match the `canopy` object (load the latter if needed).
* Convert the `neighborhoods` object to an `sp` object for use with the `raster` package.
* Compute the mean of `canopy` values by neighborhood using `raster::extract()` with the argument fun = mean (this might take a minute).
* Use `mutate`() to add a new column `avg_canopy` to neighborhoods, which is equal to `canopy_neighborhoods`.
```{r tree-canopy, eval=FALSE}
# Confirm that you have the neighborhood density results
head(neighborhoods_counts)
# Transform the neighborhoods CRS to match the canopy layer
neighborhoods_crs <- st_transform(neighborhoods_counts, crs = crs(canopy, asText = TRUE))
# Checking that it works
crs(neighborhoods_crs)
crs(canopy)
# Convert neighborhoods object to a Spatial object (optional)
neighborhoods_sp <- st_as_sf(neighborhoods_crs, "Spatial")
head(canopy)
# Compute the mean of canopy values by neighborhood
canopy_neighborhoods <- raster::extract(canopy, neighborhoods_sp, fun = mean)
# Task 1: Compute tree density by neighborhood (I)
In order to compute tree density by neighborhood you need two things. You will need to know the area of the neighborhoods, which you will compute in the next exercise. And you need the **tree counts by neighborhood** which is the focus of this exercise.
You will produce counts of all trees by neighborhood in NYC and create a single data frame with a column for total trees. The result should be a data frame with **no geometry**.
## Instructions
* Load `sf`, `raster`, and `dplyr` in your workspace.
* Load `trees`, `neighborhoods`, `canopy`, and `manhattan` objects from Week 02 data folder
* Use the `count()` function from `dplyr` on the `trees` object to compute total trees by neighborhood. The neighborhood variable is `hood`. Call the new object `tree_counts`.
* Use `head()` to take a quick look at `tree_counts` and see if the geometry variable still exists.
* Remove the geometry from your `tree_counts` data frame.
* The default for the `count()` function is to name the count field n. Use the `rename()` function from dplyr to change the column called `n` to `tree_cnt`.
* Use `hist()` to create a quick histogram of the tree counts.
```{r count-trees, eval=FALSE}
# Load data and libraries
library(pacman)
p_load(sf, raster, ggplot2, dplyr)
# Read in the trees shapefile
trees <- read_sf("../data/trees.shp")
# Read in the neighborhood shapefile
neighborhoods <- read_sf("../data/neighborhoods.shp")
# Read in the tree canopy single-band raster
canopy <- raster("../data/canopy.tif")
# Read in the manhattan Landsat image multi-band raster
manhattan <- brick("../data/canopy.tif")
# Compute the counts of all trees by hood
tree_counts <- count(trees, boroname)
# Take a quick look
head(tree_counts)
# Remove the geometry
tree_counts_no_geom <- st_set_geometry(tree_counts, NULL)
# Rename the n variable to tree_cnt
tree_counts_renamed <- rename(tree_counts_no_geom, tree_cnt = n)
# Create histograms of the total counts
ggplot(tree_counts_renamed, aes(x = boroname, y = tree_cnt)) +
geom_col()
# Compute areas and unclass
areas <- unclass(st_area(neighborhoods))
# Add the areas to the neighborhoods object
neighborhoods_area <- mutate(neighborhoods, area = areas)
neighborhoods_area
tree_counts_renamed
# Join neighborhoods and counts by shared columns (find the matching one in neighborhoods)
neighborhoods_counts <- left_join(neighborhoods_area, tree_counts_renamed, by = c("boro_name" = "boroname"))
# Replace NA values with 0 (lookup ifelse() function if needed)
neighborhoods_counts <- mutate(neighborhoods_counts,
tree_cnt = ifelse(is.na(tree_cnt),
0, tree_cnt))
neighborhoods_counts
# Compute the density
neighborhoods_counts <- mutate(neighborhoods_counts,
tree_density = tree_cnt/area)
# Confirm that you have the neighborhood density results
head(neighborhoods_counts)
# Transform the neighborhoods CRS to match the canopy layer
neighborhoods_crs <- st_transform(neighborhoods_counts, crs = crs(canopy, asText = TRUE))
# Checking that it works
crs(neighborhoods_crs)
crs(canopy)
# Convert neighborhoods object to a Spatial object (optional)
neighborhoods_sp <- st_as_sf(neighborhoods_crs, "Spatial")
head(canopy)
# Compute the mean of canopy values by neighborhood
canopy_neighborhoods <- raster::extract(canopy, neighborhoods_sp, fun = mean)
canopy_neighborhoods
canopy_neighborhoods
# Add the mean canopy values to neighborhoods
neighborhoods_avg_canopy <- mutate(neighborhoods, avg_canopy = canopy_neighborhoods)
neighborhoods_avg_canopy
# Add the mean canopy values to neighborhoods
neighborhoods_avg_canopy <- mutate(neighborhoods_crs, avg_canopy = canopy_neighborhoods)
neighborhoods_avg_canopy
# Create a histogram of tree density (tree_density)
ggplot(neighborhoods_avg_canopy, aes(x = tree_density)) +
geom_histogram(color = "white")
# Create a histogram of average canopy (avg_canopy)
ggplot(neighborhoods_avg_canopy, aes(x = avg_canopy)) +
geom_histogram(color = "white")
# Create a scatter plot of tree_density vs avg_canopy
ggplot(neighborhoods, aes(x = tree_density, y = avg_canopy)) +
___() +
___()
# Create a scatter plot of tree_density vs avg_canopy
ggplot(neighborhoods, aes(x = tree_density, y = avg_canopy)) +
geom_point() #+
# Create a scatter plot of tree_density vs avg_canopy
ggplot(neighborhoods_avg_canopy, aes(x = tree_density, y = avg_canopy)) +
geom_point() #+
# Create a scatter plot of tree_density vs avg_canopy
ggplot(neighborhoods_avg_canopy, aes(x = tree_density, y = avg_canopy)) +
geom_point() +
stat_smooth()
# Compute the correlation between density and canopy
cor(neighborhoods$tree_density, neighborhoods$avg_canopy)
# Compute the correlation between density and canopy
cor(neighborhoods$neighborhoods_avg_canopy, neighborhoods$avg_canopy)
# Compute the correlation between density and canopy
cor(neighborhoods$neighborhoods_avg_canopy, neighborhoods_avg_canopy$avg_canopy)
# Compute the correlation between density and canopy
cor(neighborhoods$neighborhoods_avg_canopy, neighborhoods_avg_canopy$avg_canopy)
# Compute the correlation between density and canopy
cor(neighborhoods_avg_canopy$tree_density, neighborhoods_avg_canopy$avg_canopy)
# Simplify name
neighborhoods <- neighborhoods_avg_canopy
# Plot the tree density with default colors
ggplot(neighborhoods) +
geom_sf(aes(fill = tree_density))
# Plot the tree canopy with default colors
ggplot(neighborhoods) +
geom_sf(aes(fill = avg_canopy))
# Plot the tree canopy with default colors
ggplot(neighborhoods) +
geom_sf(aes(fill = avg_canopy))
# Plot the tree density using scale_fill_gradient()
ggplot(neighborhoods) +
geom_sf(aes(fill = tree_density)) +
scale_fill_gradient(low = "#edf8e9", high = "#005a32")
# Plot the tree canopy using the scale_fill_gradient()
ggplot(neighborhoods) +
geom_sf(aes(fill = avg_canopy)) +
scale_fill_gradient(low = "#edf8e9", high = "#005a32")
# Load tmap library
library(tmap)
# Load tmap library
p_load(tmap)
# Create a simple map of neighborhoods
tm_shape(neighborhoods) +
tm_polygons()
# Create a color-coded map of neighborhood tree density
tm_shape(neighborhoods) +
tm_polygons(fill = tree_density)
# Create a color-coded map of neighborhood tree density
tm_shape(neighborhoods) +
tm_polygons(fill = neighborhoods$tree_density)
# Create a color-coded map of neighborhood tree density
tm_shape(neighborhoods) +
tm_polygons(color = neighborhoods$tree_density)
# Create a color-coded map of neighborhood tree density
tm_shape(neighborhoods) +
tm_polygons(col = tree_density)
or
# Create a color-coded map of neighborhood tree density
tm_shape(neighborhoods) +
tm_polygons(col = neighborhoods$tree_density)
# Create a color-coded map of neighborhood tree density
tm_shape(neighborhoods) +
tm_polygons(col = "tree_density")
# Style the tree density map
tm_shape(neighborhoods) +
tm_polygons("tree_density", palette = "Greens",
style = "quantile", n = 7,
title = "Trees per sq. KM")
# Create a similar map of average tree canopy
tm_shape(neighborhoods) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
# Style the tree density map
tm_shape(neighborhoods) +
tm_polygons("tree_density", palette = "Greens",
style = "quantile", n = 7,
title = "Trees per sq. KM")
# Create a similar map of average tree canopy
tm_shape(neighborhoods) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
neighborhoods$avg_canopy
str(neighborhoods$avg_canopy)
# Create a similar map of average tree canopy
tm_shape(neighborhoods) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
str(neighborhoods$avg_canopy)
as.numeric(neighborhoods$avg_canopy)
str(as.numeric(neighborhoods$avg_canopy))
# This fixes it
neighborhoods$avg_canopy <- as.numeric(neighborhoods$avg_canopy)
# Create a similar map of average tree canopy
tm_shape(neighborhoods) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
# Create a map of the manhattan aerial photo
tm_shape(manhattan) +
tm_raster()
# Create a map of the neighborhood polygons
tm_shape(neighborhoods) +
tm_borders(col = "black", lwd = 0.5, alpha = 0.5)
# Your code goes below
map1 <-
tm_shape(neighborhoods) +
tm_borders(col = "black", lwd = 0.5, alpha = 0.5) +
tm_shape(manhattan) +
tm_raster()
map
map1
# Create a map of the manhattan aerial photo
tm_shape(manhattan) +
tm_raster()
# Create a map of the manhattan aerial photo
tm_shape(manhattan) +
tm_rgb()
# Create a map of the manhattan aerial photo
tm_shape(manhattan) +
tm_raster()
# Your code goes below
map1 <- tm_shape(manhattan) +
tm_raster() +
tm_shape(neighborhoods) +
tm_borders(col = "black", lwd = 0.5, alpha = 0.5)
map1
# 4
map2 <- tm_shape(neighborhoods) +
tm_polygons("tree_density", palette = "Greens",
style = "quantile", n = 7,
title = "Trees per sq. KM")
# 5
tmap_arrange(map1, map2, asp = NA)
