library(knitr)
library(rmdformats)
library(tidyverse)
library(sf)
library(raster)
# Read in the trees shapefile
trees <- st_read("data/trees.shp")
# Read in the trees shapefile
trees <- st_read("data/trees.shp")
# Read in the neighborhood shapefile
neighborhoods <- st_read("data/neighborhoods.shp")
# Read in the tree canopy single-band raster
canopy <- raster("data/canopy.tif")
# Read in the manhattan Landsat image multi-band raster
manhattan <- brick("data/manhattan.tif")
# Read in the impervious single-band raster
impervious <- raster("data/impervious.tif")
# Read in the impervious single-band raster
impervious <- raster("data/impervious.tif")
# Read in the parks object
parks <- read_sf(parks.shp)
# Read in the parks object
parks <- read_sf("data/parks.shp")
# Read in the impervious single-band raster
impervious <- raster("data/impervious.tif")
# Read in the impervious single-band raster
impervious <- raster("data/impervious.tif")
# Read in the impervious single-band raster
impervious <- raster("data/impervious.tif")
# Read in the impervious single-band raster
impervious <- raster("data/impervious.tif")
# Project parks to match canopy
parks_cp <- st_transform(parks, crs = crs(canopy, asText = TRUE))
# Compute the area of the parks
areas <- st_area(parks_cp)
# Filter to parks with areas > 30000
parks_big <- filter(parks_cp, areas > 30000)
# Compute the area of the parks
areas <- st_area(parks_cp)
areas
# Filter to parks with areas > 30000
parks_big <- filter(parks_cp, areas > 30000)
# Filter to parks with areas > 30000
parks_big <- filter(parks_cp, areas > 30000)
# Filter to parks with areas > 30000
parks_big <- filter(parks_cp, areas > 30000)
# Filter to parks with areas > 30000
parks_big <- filter(parks_cp, areas > 30000)
# Filter to parks with areas > 30000
parks_big <- filter(parks_cp, areas > 30000)
# Filter to parks with areas > 30000
parks_big <- filter(parks_cp, areas > 30000)
# Plot the canopy raster
plot(canopy)
# Filter to parks with areas > 30000
parks_big <- filter(parks_cp, areas > 30000)
# Filter to parks with areas > 30000
parks_big <- filter(parks_cp, areas > 30000)
# Filter to parks with areas > 30000
parks_big <- filter(parks_cp, areas > 30000)
# Filter to parks with areas > 30000
parks_big <- filter(parks_cp, areas > 30000)
# Filter to parks with areas > 30000
parks_big <- filter(parks_cp, areas > 30000)
areasstr())
str(areas)
# Filter to parks with areas > 30000
parks_big <- filter(parks_cp, unclass(areas) > 30000)
# Plot the geometry of parks_big
plot(st_geometry(parks_big))
# Plot the canopy raster
plot(canopy)
str(areas)
# Filter to parks with areas > 30000
parks_big <- filter(parks_cp, unclass(areas) > 30000)
# Convert parks to a Spatial object
parks_sp <- as(parks_big, "Spatial")
# Mask the canopy layer with parks_sp and save as canopy_mask
canopy_mask <- filter(canopy, mask = parks_sp)
# Mask the canopy layer with parks_sp and save as canopy_mask
canopy_mask <- filter(canopy, mask = parks_sp)
# Mask the canopy layer with parks_sp and save as canopy_mask
canopy_mask <- mask(canopy, mask = parks_sp)
# Mask the canopy layer with parks_sp and save as canopy_mask
canopy_mask <- mask(canopy, mask = parks_sp)
# Plot canopy_mask -- this is a raster!
plot(canopy_mask)
---
title: "11 - Raster Analysis"
author: "Adela Sobotkova"
date: "04/01/2021 updated `r format(Sys.time(), '%B %d, %Y')`"
output:
rmdformats::readthedown:
highlight: kate
---
```{r setup, include=FALSE}
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
```
```{r libraries, include=FALSE}
library(tidyverse)
library(sf)
library(raster)
# Read in the trees shapefile
trees <- st_read("data/trees.shp")
# Read in the neighborhood shapefile
neighborhoods <- st_read("data/neighborhoods.shp")
# Read in the tree canopy single-band raster
canopy <- raster("data/canopy.tif")
# Read in the manhattan Landsat image multi-band raster
manhattan <- brick("data/manhattan.tif")
# Read in the impervious single-band raster
impervious <- raster("data/impervious.tif")
```
# Task 1: Limit rasters to focus areas
Mask and crop are similar operations that allow you to limit your raster to a specific area of interest. With `mask()` you essentially place your area of interest on top of the raster and any raster cells outside of the boundary are assigned NA values. A reminder that currently the `raster` package does not support `sf` objects so they will need to be converted to `Spatial` objects with, for example, `as(input, "Spatial")`.
## Instructions I
* Create `parks` object from shapefile ("parks.shp")
* Project the `parks` object to match the canopy raster with `st_transform()` and `crs()`. Assign this to `parks_cp`.
* Compute the area of the parks with `st_area()` and save this object as `areas`.
* Filter the parks to only those above 30000 square meters with the `filter()` function. You will need to wrap `areas` in `unclass()`. Save as `parks_big`. Remember to have the tidyverse or dplyr library attached for `filter()` to work properly.
```{r filter-area, eval=FALSE, echo=TRUE}
# Read in the parks object
parks <- read_sf("data/parks.shp")
# sf er shapefiles
# st er spatial
# Project parks to match canopy
parks_cp <- st_transform(parks, crs = crs(canopy, asText = TRUE))
# Compute the area of the parks
areas <- st_area(parks_cp)
str(areas)
# Filter to parks with areas > 30000
parks_big <- filter(parks_cp, unclass(areas) > 30000)
# Plot the canopy raster
plot(canopy)
# Plot the geometry of parks_big
plot(st_geometry(parks_big))
# Convert parks to a Spatial object
parks_sp <- as(parks_big, "Spatial")
# Mask the canopy layer with parks_sp and save as canopy_mask
canopy_mask <- mask(canopy, mask = parks_sp)
# Plot canopy_mask -- this is a raster!
plot(canopy_mask)
# Mask the canopy with the large parks
canopy_mask <- mask(canopy, mask = parks_sp)
# Plot the mask
plot(st_geometry(canopy_mask))
# Plot the mask
plot(canopy_mask)
# Plot the mask
plot(canopy_mask)
# Crop canopy with parks_sp
canopy_crop <- st_crop(canopy, parks_sp)
# Crop canopy with parks_sp
canopy_crop <- crop(canopy, parks_sp)
# Plot the cropped version and compare
plot(canopy_crop)
# Plot the cropped version and compare
plot(canopy_crop)
# Create a landmarks dataframe
ldf <- data.frame(place = c("Empire State Building", "Museum of Natural History", "Central Park (The Ramble)"),
longitude=c(-73.98566,-73.97398, -73.96964),
latitude=c(40.74844,40.78132, 40.77734))
# Plot the mask
plot(canopy_mask)
# Plot the cropped version and compare
plot(canopy_crop)
# Create a landmarks dataframe
ldf <- data.frame(place = c("Empire State Building", "Museum of Natural History", "Central Park (The Ramble)"),
longitude=c(-73.98566,-73.97398, -73.96964),
latitude=c(40.74844,40.78132, 40.77734))
# Convert the data frame to an sf object
landmarks <- st_as_sf(ldf, coords = c("longitude", "latitude"), crs =4326)
# Project the landmarks to match canopy
landmarks_cp <- st_transform(landmarks, crs = crs(canopy, asText = TRUE))
# Extract the canopy values at the landmarks
landmarks_ex <- raster::extract(canopy, landmarks_cp)
# Look at the landmarks and extraction results
landmarks_cp
landmarks_ex
# Read in the canopy and impervious layer
canopy <- raster("data/canopy")
impervious <- raster("data/impervious.tif")
impervious <- raster("data/impervious.tif")
# Read in the canopy and impervious layer
canopy <- raster("data/canopy")
impervious <- raster("data/impervious.tif")
# Read in the canopy and impervious layer
canopy <- raster("data/canopy.tif")
# Function f with 2 arguments and the raster math code
f <- function(rast1, rast2) {
rast1 < 20 & rast2 > 80
}
# Function f with 2 arguments and the raster math code
f <- function(rast1, rast2) {
rast1 < 20 & rast2 > 80
}
# Do the overlay using f as fun
canopy_imperv_overlay <- f(canopy, impervious, fun = f)
# Do the overlay using f as fun
canopy_imperv_overlay <- f(canopy, impervious, fun = F)
# Do the overlay using f as fun
canopy_imperv_overlay <- f(canopy, impervious, fun = F)
# Do the overlay using f as fun
canopy_imperv_overlay <- f(canopy, impervious, fun = 'f)
# Do the overlay using f as fun
canopy_imperv_overlay <- f(canopy, impervious, fun = 'f')
# Do the overlay using f as fun
canopy_imperv_overlay <- f(canopy, impervious, fun = F)
# Function f with 2 arguments and the raster math code
f <- function(rast1, rast2) {
rast1 < 20 & rast2 > 80
}
# Do the overlay using f as fun
canopy_imperv_overlay <- f(canopy, impervious, fun = f)
# Function f with 2 arguments and the raster math code
f <- function(rast1, rast2) {
rast1 < 20 & rast2 > 80
}
# Do the overlay using f as fun
canopy_imperv_overlay <- f(canopy, impervious, fun = f)
# Do the overlay using f as fun
canopy_imperv_overlay <- overlay(canopy, impervious, fun = f)
# Plot the result (low tree canopy and high impervious areas)
___(canopy_imperv_overlay)
# Plot the result (low tree canopy and high impervious areas)
plot(canopy_imperv_overlay)
# Plot the result (low tree canopy and high impervious areas)
plot(canopy_imperv_overlay, add = T)
plot(canopy)
plot(impervious, add = T)
# Plot the result (low tree canopy and high impervious areas)
plot(canopy_imperv_overlay)
plot(impervious, add = T)
# Do the overlay using f as fun
canopy_imperv_overlay <- overlay(canopy, impervious, fun = f)
# Plot the result (low tree canopy and high impervious areas)
plot(canopy_imperv_overlay)
plot(impervious, add = T)
# Plot the result (low tree canopy and high impervious areas)
plot(canopy_imperv_overlay)
# Plot the result (low tree canopy and high impervious areas)
plot(canopy_imperv_overlay)
