<<<<<<< HEAD
colnames(cities)
# Convert the table into an sf object on the basis of X and Y columns
cities_sf <- read_csv(cities, coords = c("Longitude (X)", "Latitude (Y)"))
# Define the projection of Lat/Long coordinates as EPSG 4326
cities_sf4326<- st_set_crs(cities_sf, crs = 4326)
# Define the projection of Lat/Long coordinates as EPSG 4326
cities_sf4326<- st_set_crs(cities_sf, crs = 4326)
# Define the projection of Lat/Long coordinates as EPSG 4326
cities_sf4326<- st_set_crs(cities_sf, 4326)
# Transform the projection to a 2D projection using EPSG 3035
cities_sf3035<- st_transform(cities_sf4326, 3035)
# Verify the projection is 'projected' not 'geographic'
head(cities_sf3035)
crs(cities_sf3035)
# Plot the first 10 buffers and cities to check result
plot(st_geometry(cities_5km)[1:10], col = "yellow")
plot(st_geometry(cities_sf3035)[1:10], pch=20, cex = 0.1, add = TRUE)
ten_cities <- cities_sf3035 %>% slice(1:10)
# Create a quick tmap
current.mode <- tmap_mode("plot")
# Create a quick tmap
current.mode <- tmap_mode("plot")
tm_shape(ten_buffers)  +
tm_polygons(col = "yellow") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 1, auto.placement = 5) +
tm_dots(col = "black",
size = 0.1) +
tm_scale_bar(breaks = 0, 10, 20,
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("right", "bottom"),
text = "Emil Jessen, Feb-21-2021") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
# Create a quick tmap
current.mode <- tmap_mode("plot")
tm_shape(ten_buffers)  +
tm_polygons(col = "yellow") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 1, auto.placement = 5) +
tm_dots(col = "black",
size = 0.1) +
tm_scale_bar(breaks = c(0, 10, 20), # Correct km scale with 0,10 and 20 km distances
text.size = 10,
position = c("left", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("right", "bottom"),
text = "Emil Jessen, Feb-21-2021") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
# Download the file and save as inscriptions.json (consider commenting out after you first run to avoid repeat downloading)
download.file("https://sciencedata.dk/public/b6b6afdb969d378b70929e86e58ad975/EDH_subset_2021-02-15.json", "C:/Users/Lenovo/Desktop/Diverse dokumenter/Cognitive Science/cultural_data_science/cds-spatialWeek03/HW03/inscriptions.json")
# Download the file and save as inscriptions.json (consider commenting out after you first run to avoid repeat downloading)
download.file("https://sciencedata.dk/public/b6b6afdb969d378b70929e86e58ad975/EDH_subset_2021-02-15.json", "C:/Users/Lenovo/Desktop/Diverse dokumenter/Cognitive Science/cultural_data_science/cds-spatial/Week03/HW03/inscriptions.json")
# Load it into R from wherever you put it, and convert into a tibble
list_json <- jsonlite::fromJSON("C:/Users/Lenovo/Desktop/Diverse dokumenter/Cognitive Science/cultural_data_science/cds-spatial/Week03/HW03//inscriptions.json")
inscriptions = as_tibble(list_json)
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = as.numeric(gsub("\\D", "", latitude)),
longitude = as.numeric(gsub("\\D", "", longitude)))
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng=i_sm$longitude,lat=i_sm$latitude)
# Download the file and save as inscriptions.json (consider commenting out after you first run to avoid repeat downloading)
#download.file("https://sciencedata.dk/public/b6b6afdb969d378b70929e86e58ad975/EDH_subset_2021-02-15.json", "inscriptions.json") # Last one is where you want to put it and name it as
# Load it into R from wherever you put it, and convert into a tibble
list_json <- jsonlite::fromJSON("inscriptions.json")
inscriptions = as_tibble(list_json)
# Check the first couple lines and column names
head(inscriptions) # Inspecting first lines
colnames(inscriptions) # Printing all column names
# Selecting the  coordinates column
inscriptions %>%
slice(1:100) %>%
select(coordinates)
# Okay it seems like coordinates contains two elements. Lets check that out
inscriptions$coordinates[1]
# So these are separated into two. However, as we see, they have some letters still we need to filter out.
inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>% select(longitude, latitude)
# Wrangle the coordinates into a plottable format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>% # Using str_remove_all to remove c, (, and ) in the coordinate columns
mutate(latitude = as.numeric(str_remove_all(latitude, "[)]+")),
longitude = as.numeric(str_remove_all(longitude, "[c(]+")))
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng=i_sm$longitude,lat=i_sm$latitude)
inscriptions %>%
slice(1:100) %>%
select(coordinates)
inscriptions = as_tibble(list_json)
# Check the first couple lines and column names
head(inscriptions)
colnames(inscriptions)
inscriptions %>%
slice(1:100) %>%
select(coordinates)
# Load it into R from wherever you put it, and convert into a tibble
list_json <- jsonlite::fromJSON("C:/Users/Lenovo/Desktop/Diverse dokumenter/Cognitive Science/cultural_data_science/cds-spatial/Week03/HW03//inscriptions.json")
inscriptions = as_tibble(list_json)
# Check the first couple lines and column names
head(inscriptions)
colnames(inscriptions)
inscriptions %>%
slice(1:100) %>%
select(coordinates)
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>% # Using str_remove_all to remove c, (, and ) in the coordinate columns
mutate(latitude = as.numeric(str_remove_all(latitude, "[)]+")),
longitude = as.numeric(str_remove_all(longitude, "[c(]+")))
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng=i_sm$longitude,lat=i_sm$latitude)
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = as.numeric(gsub("\\D", "", latitude)),
longitude = as.numeric(gsub("\\D", "", longitude)))
i_sm[,"longitude"]
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>% # Using str_remove_all to remove c, (, and ) in the coordinate columns
mutate(latitude = as.numeric(str_remove_all(latitude, "[)]+")),
longitude = as.numeric(str_remove_all(longitude, "[c(]+")))
i_sm[,"longitude"]
i_sm[,"longitude"]
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = as.numeric(gsub("\\D", "", latitude)),
longitude = as.numeric(gsub("\\D", "", longitude)))
i_sm[,"longitude"]
inscriptions$coordinates
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = as.numeric(str_remove_all(latitude, "[)]+")),
longitude = as.numeric(str_remove_all(longitude, "[)]+")))
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng=i_sm$longitude,lat=i_sm$latitude)
inscriptions = as_tibble(list_json)
# Check the first couple lines and column names
head(inscriptions)
colnames(inscriptions)
inscriptions %>%
slice(1:100) %>%
select(coordinates)
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = as.numeric(str_remove_all(latitude, "[)]+")),
longitude = as.numeric(str_remove_all(longitude, "[)]+")))
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng=i_sm$longitude,lat=i_sm$latitude)
# Load it into R from wherever you put it, and convert into a tibble
list_json <- jsonlite::fromJSON("C:/Users/Lenovo/Desktop/Diverse dokumenter/Cognitive Science/cultural_data_science/cds-spatial/Week03/HW03//inscriptions.json")
inscriptions = as_tibble(list_json)
# Check the first couple lines and column names
head(inscriptions)
colnames(inscriptions)
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = as.numeric(str_remove_all(latitude, "[)]+")),
longitude = as.numeric(str_remove_all(longitude, "[)]+")))
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng=i_sm$longitude,lat=i_sm$latitude)
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = as.numeric(str_remove_all(latitude, "[)]+")),
longitude = as.numeric(str_remove_all(longitude, "[c(]+")))
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng=i_sm$longitude,lat=i_sm$latitude)
i <- inscriptions[,] %>%
separate(col = coordinates,
into = c("longitude","latitude"),
sep = ",") %>%
mutate(latitude = as.numeric(gsub("\\D", "", latitude)),
longitude = as.numeric(gsub("\\D", "", longitude))) %>%
filter(!is.na(longitude)) %>%
filter(!is.na(latitude)) %>%
filter(longitude > 5 & longitude < 20)
# ******** fix
str(i[,"longitude"])
i[,"longitude"]
i <- inscriptions %>%
separate(col = coordinates,
into = c("longitude","latitude"),
sep = ",") %>%
mutate(latitude = as.numeric(gsub("\\D", "", latitude)),
longitude = as.numeric(gsub("\\D", "", longitude))) %>%
filter(!is.na(longitude)) %>%
filter(!is.na(latitude)) %>%
filter(longitude > 5 & longitude < 20)
# ******** fix
str(i[,"longitude"])
i[,"longitude"]
i <- inscriptions %>%
separate(col = coordinates,
into = c("longitude","latitude"),
sep = ",") %>%
mutate(latitude = as.numeric(str_remove_all(latitude, "[)]+")),
longitude = as.numeric(str_remove_all(longitude, "[c(]+"))) %>%
filter(!is.na(longitude)) %>%
filter(!is.na(latitude)) %>%
filter(longitude > 5 & longitude < 20)
# ******** fix
str(i[,"longitude"])
i[,"longitude"]
anyNA(i[,c("longitude", "latitude")])
# Create a sf object
insc_sf4326 <- st_as_sf(i, coords = c("longitude", "latitude"), crs = 4326)
# Create a sf object
insc_sf4326 <- st_as_sf(i, coords = c("longitude", "latitude"), crs = 4326)
# Plot
plot(st_geometry(insc_sf4326))
# Project the sf object into EPSG3035 so it is consistent with cities and their buffers
insc_sf3035 <- st_transform(insc_sf3035, 3035)
# Create a convex hull around the inscriptions's points dissolved into a MULTIPOINT
insc_ch <- st_convex_hull(st_union(insc_sf3035))
# Create a buffer from a cluster of cities that fall within the convex hull
cities_it <- st_intersection(insc_ch, st_buffer(cities_5km))
insc_ch
# Create a convex hull around the inscriptions's points dissolved into a MULTIPOINT
insc_ch <- st_convex_hull(st_union(insc_sf3035))
insc_sf3035
insc_sf3035$geometry
# Create a sf object
insc_sf4326 <- st_as_sf(i, coords = c("longitude", "latitude"), crs = 4326)
# Plot
plot(st_geometry(insc_sf4326))
# Project the sf object into EPSG3035 so it is consistent with cities and their buffers
insc_sf3035 <- st_transform(insc_sf4326, 3035)
insc_sf3035$geometry
# Create a convex hull around the inscriptions's points dissolved into a MULTIPOINT
insc_ch <- st_convex_hull(st_union(insc_sf3035))
insc_ch
# Create a buffer from a cluster of cities that fall within the convex hull
cities_it <- st_intersection(insc_ch, st_buffer(cities_5km))
# Create a buffer from a cluster of cities that fall within the convex hull
cities_it <- st_intersection(insc_ch, st_union(cities_5km))
cities_it
# Dissolve the 399 buffers into a single MULTIPOLYGON buffer feature
c_buff <- st_union(cities_it)
c_buff
cities_it
cities_it
# Create a buffer from a cluster of cities that fall within the convex hull
cities_it <- st_intersection(insc_ch, st_geometry(cities_5km))
cities_it
c_buff
# Dissolve the 399 buffers into a single MULTIPOLYGON buffer feature
c_buff <- st_union(cities_it)
c_buff
# Calculate the number of inscriptions in urban and rural areas. This may take a couple seconds
insc_urban <- st_intersects(insc_sf3035, c_buff)
insc_rural <- st_intersects(insc_sf3035, c_buff)
insc_rural <- st_difference(insc_sf3035, c_buff)
# Calculate the number of inscriptions in urban and rural areas. This may take a couple seconds
insc_urban <- st_intersects(insc_sf3035, c_buff)
insc_rural <- st_difference(insc_sf3035, c_buff)
length(insc_urban)
length(insc_rural)
(length(insc_urban) + length(insc_rural)) / length(insc_rural)
nrow(insc_urban)
nrow(insc_rural)
length(insc_rural)
nrow(insc_urban)
nrow(insc_rural)
str(insc_urban)
nrow(insc_urban)
nrow(insc_rural)
(nrow(insc_urban) + nrow(insc_rural)) / nrow(insc_rural)
nrow(insc_sf3035$geometry)
nrow(insc_sf3035)
nrow(insc_urban)
nrow(insc_rural)
length(insc_urban)
length(insc_rural)
# Project the sf object into EPSG3035 so it is consistent with cities and their buffers
insc_sf3035 <- st_transform(insc_sf4326, 3035)
nrow(insc_sf3035)
# Create a convex hull around the inscriptions's points dissolved into a MULTIPOINT
insc_ch <- st_convex_hull(st_union(insc_sf3035))
# Create a buffer from a cluster of cities that fall within the convex hull
cities_it <- st_intersection(insc_ch, st_geometry(cities_5km))
cities_it
# Dissolve the 399 buffers into a single MULTIPOLYGON buffer feature
c_buff <- st_union(cities_it)
c_buff
# Calculate the number of inscriptions in urban and rural areas. This may take a couple seconds
insc_urban <- st_intersects(insc_sf3035, c_buff)
insc_rural <- st_difference(insc_sf3035, c_buff)
nrow(insc_urban)
nrow(insc_rural)
nrow(insc_urban)
nrow(insc_rural)
# Project the sf object into EPSG3035 so it is consistent with cities and their buffers
insc_sf3035 <- st_transform(insc_sf4326, crs = 3035)
# Create a convex hull around the inscriptions's points dissolved into a MULTIPOINT
insc_ch <- st_convex_hull(st_union(insc_sf3035))
# Create a buffer from a cluster of cities that fall within the convex hull
cities_it <- st_intersection(insc_ch, st_geometry(cities_5km)) # Using st_union to combine it into a multipoint
# Dissolve the 399 buffers into a single MULTIPOLYGON buffer feature
c_buff <- st_union(cities_it)
# Calculate the number of inscriptions in urban and rural areas. This may take a couple seconds
insc_urban <- st_intersection(insc_sf3035, c_buff)
insc_rural <- st_difference(insc_sf3035, c_buff)
nrow(insc_urban) # 10462
nrow(insc_rural) # 1608
(nrow(insc_urban) + nrow(insc_rural)) / nrow(insc_rural)
cities_it
cities_it
unlist(cities_it)
unique(unlist(cities_it))
# number of cities within the buffers zones (using unlist on cities_it, since cities_it contains a list of lists)
unlist(cities_it)
# number of cities within the buffers zones (using unlist on cities_it, since cities_it contains a list of lists)
length(unlist(cities_it))
# number of cities within the buffers' zones, when you remove duplicates
length(unique(unlist(cities_it)))
# number of duplicates
length(unlist(cities_it)) - length(unique(unlist(cities_it)))
crs(cities)
crs(inscriptions)
crs(inscriptions)
# checking to see whether the cities object has the same CRS as inscriptions:
crs(cities)
st_crs(cities)
st_crs(inscriptions)
# number of cities within the buffers' zones (using unlist on cities_it, since cities_it contains a list of lists)
length(unlist(st_geometry(cities_it)))
# number of cities within the buffers' zones (using unlist on cities_it, since cities_it contains a list of lists)
length(unlist(cities_it))
# checking to see whether the cities object has the same CRS as inscriptions:
crs(cities)
crs(inscriptions)
st_crs(cities)
st_crs(inscriptions)
# number of cities within the buffers' zones, when you remove duplicates
length(unique(unlist(st_geometry(cities_it))))
# number of cities within the buffers' zones (using unlist on cities_it, since cities_it contains a list of lists)
length(unlist(st_geometry(cities_it)))
# number of cities within the buffers' zones, when you remove duplicates
length(unique(unlist(st_geometry(cities_it))))
# number of duplicates
length(unlist(cities_it)) - length(unique(unlist(cities_it)))
(nrow(insc_urban) + nrow(insc_rural)) / nrow(insc_rural)
nrow(insc_urban)
nrow(insc_rural)
(nrow(insc_urban) + nrow(insc_rural)) / nrow(insc_rural)
i <- inscriptions %>%
separate(col = coordinates,
into = c("longitude","latitude"),
sep = ",") %>%
mutate(latitude = as.numeric(str_remove_all(latitude, "[)]+")),
longitude = as.numeric(str_remove_all(longitude, "[c(]+"))) %>%
filter(!is.na(longitude)) %>%
filter(!is.na(latitude)) %>%
filter(longitude > 5 & longitude < 20)
str(i[,"longitude"])
i[,"longitude"]
anyNA(i[,c("longitude", "latitude")])
crs(inscriptions)
head(inscriptions)
# checking to see whether the cities object has the same CRS as inscriptions:
crs(cities)
crs(inscriptions)
st_crs(cities)
st_crs(inscriptions)
# checking to see whether the cities object has the same CRS as inscriptions:
st_as_sf(cities)
crs(cities)
# checking to see whether the cities object has the same CRS as inscriptions:
crs(cities)
crs(inscriptions)
st_crs(cities)
st_crs(inscriptions)
# checking to see whether the cities object has the same CRS as inscriptions:
crs(cities)
crs(inscriptions)
st_crs(cities)
st_crs(inscriptions)
# Making sure it has the same crs:
citiescrs(cities)
# checking to see whether the cities object has the same CRS as inscriptions
crs(insc_sf4326)
crs(cities)
# Making sure it has the same crs:
crs(cities) <- 4326
# Making sure it has the same crs:
st_crs(cities) <- 4326
# Making sure it has the same crs:
str(cities)
crs(cities_it)
crs(cities_it)
crs(cities_it) # I am also assuming we're talking about cities_it
st_crs(cities_it) <- 4326
st_crs(cities_it)
# Get a list of inscriptions for each of the 399 buffers
inscriptions_for_all_buffers <- st_intersects(cities_it)
# Get a list of inscriptions for each of the 399 buffers
inscriptions_for_all_buffers <- st_intersects(st_geometry(cities_it))
inscriptions_for_all_buffers
inscriptions_for_all_buffers
st_intersects(cities_it, insc_sf3035)
crs(cities_it)
crs(insc_sf3035)
# Cities and inscriptions - do they have the same crs?
crs(cities_it)
crs(insc_sf3035)
# No. So let's transform them so they match
st_transform(cities_it, crs = crs(insc_sf3035))
# No. So let's transform them so they match
sst_transform(cities_it, crs = crs(insc_sf3035))
# No. So let's transform them so they match
s <- st_transform(cities_it, crs = crs(insc_sf3035))
crs(s)
# Cities and inscriptions - do they have the same crs?
crs(cities_it)
crs(insc_sf3035)
# Cities and inscriptions - do they have the same crs?
crs(cities_it)
crs(insc_sf3035)
crs(s)
# No. So let's transform cities so they match
cities_it3035 <- st_transform(cities_it, crs = crs(insc_sf3035))
#
st_intersects(cities_it3035, insc_sf3035)
# Cities and inscriptions - do they have the same crs?
crs(cities_it)
crs(insc_sf3035)
# No. So let's transform cities so they match
cities_it3035 <- st_transform(cities_it, crs = crs(insc_sf3035))
#
st_intersects(cities_it3035, insc_sf3035)
# Cities and inscriptions - do they have the same crs?
st_crs(cities_it)
st_crs(insc_sf3035)
# Cities and inscriptions - do they have the same crs?
st_crs(cities_it)
# No. So let's transform cities so they match
cities_it3035 <- st_transform(cities_it, crs = 3035)
# Cities and inscriptions - do they have the same crs?
st_crs(cities_it)
# No. So let's transform cities so they match
cities_it3035 <- st_transform(cities_it, crs = 3035)
# Cities and inscriptions - do they have the same crs?
st_crs(cities_it)
st_crs(insc_sf3035)
# No. So let's transform cities so they match
cities_it3035 <- st_transform(cities_it, crs = 3035)
# No. So let's transform cities so they match
cities_it3035 <- st_transform(cities_it, crs = 3035)
st_crs(cities_it3035)
st_crs(cities_it3035)
st_crs(insc_sf3035)
st_crs(cities_it3035)
st_crs(insc_sf3035)
st_crs(cities_it3035)
st_crs(insc_sf3035)
st_crs(cities_it3035)
#
st_intersects(cities_it3035, insc_sf3035)
#
st_intersects(cities_it3035, insc_sf3035)
# Cities and inscriptions - do they have the same crs?
st_crs(cities_it)
st_crs(insc_sf3035)
st_crs(cities_it3035)
# No. So let's transform cities so they match
cities_it3035 <- st_transform(cities_it, crs = 3035)
# Cities and inscriptions - do they have the same crs?
st_crs(cities_it)
st_crs(insc_sf3035)
st_crs(cities_it3035)
# No. So let's transform cities so they match
cities_it3035 <- st_transform(cities_it, crs = 3035)
#
st_intersects(cities_it3035, insc_sf3035)
#
insc_per_city <- st_geometry(cities_it) %>%
st_intersects(insc_sf3035)
#
insc_per_city <- st_geometry(cities_it3035) %>%
st_intersects(insc_sf3035)
insc_per_city
(nrow(insc_urban) + nrow(insc_rural)) / nrow(insc_rural)
=======
install.packages("htmltab")
install.packages("htmltools")
install.packages("htmltools")
library(htmltab)
library(htmltools)
source('~/RStudio/1_Teaching/spatial-analytics/01_LeafletBackgrounds.R')
source('~/RStudio/1_Teaching/spatial-analytics/01_LeafletBackgrounds.R')
library(htmltab)
source('~/RStudio/1_Teaching/spatial-analytics/01_LeafletBackgrounds.R')
AUSmap
save_html(AUSmap, "AUSmap.html")
# Save map as a html document (optional, replacement of pushing the export button)
# only works in root
library(htmlwidgets)
saveWidget(AUSmap, "AUSmap.html", selfcontained = TRUE)
source('~/RStudio/1_Teaching/spatial-analytics/02_LeafletHotsprings.R', encoding = 'UTF-8')
leaflet() %>%
addTiles() %>%
addProviderTiles("Esri.WorldTopoMap", group = "Topo") %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI Aerial") %>%
addCircleMarkers(data=springs.SP, group="Hot Springs", radius = 4, opacity=1, fill = "darkblue",stroke=TRUE,
fillOpacity = 0.75, weight=2, fillColor = "yellow",
popup = paste0("Spring Name: ", springs.SP$SpringName,
"<br> Temp_F: ", springs.SP$Temp_F,
"<br> Area: ", springs.SP$AREA)) %>%
addLayersControl(
baseGroups = c("Topo","ESRI Aerial", "Night"),
overlayGroups = c("Hot SPrings"),
options = layersControlOptions(collapsed = T))
springsmap <- leaflet() %>%
addTiles() %>%
addProviderTiles("Esri.WorldTopoMap", group = "Topo") %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI Aerial") %>%
addCircleMarkers(data=springs.SP, group="Hot Springs", radius = 4, opacity=1, fill = "darkblue",stroke=TRUE,
fillOpacity = 0.75, weight=2, fillColor = "yellow",
popup = paste0("Spring Name: ", springs.SP$SpringName,
"<br> Temp_F: ", springs.SP$Temp_F,
"<br> Area: ", springs.SP$AREA)) %>%
addLayersControl(
baseGroups = c("Topo","ESRI Aerial", "Night"),
overlayGroups = c("Hot SPrings"),
options = layersControlOptions(collapsed = T))
springsmap
source('~/RStudio/1_Teaching/spatial-analytics/03_LeafletMounds.R')
source('~/RStudio/1_Teaching/spatial-analytics/03_LeafletMounds.R')
popup = c("Robin", "Jakub", "Jannes")
leaflet() %>%
addProviderTiles("Esri.WorldPhysical") %>%
#addProviderTiles("Esri.WorldImagery") %>%
addAwesomeMarkers(lng = c(-3, 23, 11),
lat = c(52, 53, 49),
popup = popup)
leaflet() %>%
addProviderTiles("Esri.WorldPhysical") %>%
addProviderTiles("Esri.WorldImagery") %>%
addAwesomeMarkers(lng = c(-3, 23, 11),
lat = c(52, 53, 49),
popup = popup)
leaflet() %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery",
options = providerTileOptions(opacity=0.5)) %>%
setView(lng = 151.005006, lat = -33.9767231, zoom = 10)
leaflet() %>%
addTiles() %>%
setView( lng = 2.34, lat = 48.85, zoom = 5 ) %>%
addProviderTiles("Esri.WorldPhysical", group = "Physical") %>%
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%
addProviderTiles("MtbMap", group = "Geo") %>%
addLayersControl(
baseGroups = c("Geo","Aerial", "Physical"),
options = layersControlOptions(collapsed = T))
leaflet() %>%
setView(151.2339084, -33.85089, zoom = 13) %>%
addTiles()  # checking I am in the right area
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l_aus <- l_aus %>% addProviderTiles(provider, group = provider)
}
AUSmap <- l_aus %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")
addControl("", position = "topright")
library(leaflet)
library(htmltools)
library(htmlwidgets)
AUSmap <- l_aus %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")
addControl("", position = "topright")
AUSmap <- l_aus %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
# htmlwidgets::onRender("
#                       function(el, x) {
#                       var myMap = this;
#                       myMap.on('baselayerchange',
#                       function (e) {
#                       myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
#                       })
#                       }")
addControl("", position = "topright")
l_aus <- leaflet() %>%   # assign the base location to an object
setView(151.2339084, -33.85089, zoom = 13)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l_aus <- l_aus %>% addProviderTiles(provider, group = provider)
}
AUSmap <- l_aus %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
# htmlwidgets::onRender("
#                       function(el, x) {
#                       var myMap = this;
#                       myMap.on('baselayerchange',
#                       function (e) {
#                       myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
#                       })
#                       }")
addControl("", position = "topright")
AUSmap
AUSmap <- l_aus %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
AUSmap
library(htmlwidgets)
saveWidget(AUSmap, "AUSmap.html", selfcontained = TRUE)
AUSmap
l_dk <- leaflet() %>%   # assign the base location to an object
setView(11, 56, zoom = 7)
#l_dk %>% addTiles()
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l_dk <- l_dk %>% addProviderTiles(provider, group = provider)
}
# l_dk
# Create the map
MapDK <- l_dk %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")%>%
addControl("", position = "topright")
MapDK
library(tidyverse)
library(googlesheets4)
places <- read_sheet("https://docs.google.com/spreadsheets/d/1PlxsPElZML8LZKyXbqdAYeQCDIvDps2McZx1cTVWSzI/edit#gid=0",col_types = "cccnncn")
library(googlesheets4)
places <- read_sheet("https://docs.google.com/spreadsheets/d/1PlxsPElZML8LZKyXbqdAYeQCDIvDps2McZx1cTVWSzI/edit#gid=0",col_types = "cccnncn")
places <- read_sheet("https://docs.google.com/spreadsheets/d/1PlxsPElZML8LZKyXbqdAYeQCDIvDps2McZx1cTVWSzI/edit#gid=0",col_types = "cccnncn")
glimpse(places)
places %>% filter(!is.na(Longitude))
places <- places %>% filter(!is.na(Longitude))
leaflet() %>%
addTiles() %>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = places$Description)
MapDK %>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = places$Description)
MapDK %>%
addCircleMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = places$Description)
places <- read_sheet("https://docs.google.com/spreadsheets/d/1PlxsPElZML8LZKyXbqdAYeQCDIvDps2McZx1cTVWSzI/edit#gid=0",col_types = "cccnncn")
MapDK %>%
addCircleMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = places$Description,
clusterOptions = markerClusterOptions())
places <- places %>% filter(!is.na(Longitude))
gs4_oauth_app()
gs4_auth_configure()
gs4_token()
gs4_auth_configure()
gs4_has_token()
places <- places %>% filter(!is.na(Longitude) && !is.na(Latitude))
MapDK %>%
addCircleMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = places$Description,
clusterOptions = markerClusterOptions())
>>>>>>> f1af15980dfcf4653772eee8bd20d02d6ec12cc3
